// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using siges.Data;

namespace siges.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200522151112_ModifUbicacion")]
    partial class ModifUbicacion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("siges.Areas.Identity.Data.RoatechIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int?>("dirId");

                    b.Property<int?>("perId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("dirId");

                    b.HasIndex("perId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("siges.Models.ActivoFijo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Clave");

                    b.Property<string>("Descripcion");

                    b.Property<bool>("Estatus");

                    b.Property<DateTime>("FechaAlta");

                    b.Property<DateTime>("FechaFactura");

                    b.Property<string>("Marca");

                    b.Property<string>("Opcional1");

                    b.Property<string>("Opcional2");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Tipo");

                    b.HasKey("Id");

                    b.ToTable("ActivoFijo");
                });

            modelBuilder.Entity("siges.Models.Administracion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<DateTime>("FacturaFecha");

                    b.Property<string>("FacturaFolio");

                    b.Property<DateTime>("FechaAdministrativa");

                    b.Property<int>("OrdenServicioId");

                    b.Property<int>("PersonaId");

                    b.HasKey("Id");

                    b.ToTable("Administracion");
                });

            modelBuilder.Entity("siges.Models.Bitacora", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Event");

                    b.Property<DateTime>("EventDate");

                    b.Property<string>("Section");

                    b.Property<string>("UserId");

                    b.HasKey("ID");

                    b.ToTable("Bitacora");
                });

            modelBuilder.Entity("siges.Models.BitacoraEstatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("A");

                    b.Property<string>("De");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<DateTime>("FechaAdministrativa");

                    b.Property<string>("Folio");

                    b.Property<int?>("OsId");

                    b.Property<int?>("QuienCambiaId");

                    b.HasKey("Id");

                    b.HasIndex("OsId");

                    b.HasIndex("QuienCambiaId");

                    b.ToTable("BitacoraEstatus");
                });

            modelBuilder.Entity("siges.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<string>("Opcional1");

                    b.Property<string>("Opcional2");

                    b.Property<string>("RFC");

                    b.Property<string>("RazonSocial");

                    b.Property<string>("Telefono");

                    b.HasKey("Id");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("siges.Models.Comercial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<DateTime>("FechaAdministrativa");

                    b.Property<int>("OrdenServicioId");

                    b.Property<int>("PersonaId");

                    b.HasKey("Id");

                    b.ToTable("Comercial");
                });

            modelBuilder.Entity("siges.Models.ConciliacionActivoFijo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<DateTime>("Fecha");

                    b.Property<string>("Folio");

                    b.Property<int?>("UbicacionId");

                    b.HasKey("Id");

                    b.HasIndex("UbicacionId");

                    b.ToTable("ConciliacionActivoFijo");
                });

            modelBuilder.Entity("siges.Models.ConciliacionInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<DateTime>("Fecha");

                    b.Property<string>("Folio");

                    b.Property<int?>("UbicacionId");

                    b.HasKey("Id");

                    b.HasIndex("UbicacionId");

                    b.ToTable("ConciliacionInsumo");
                });

            modelBuilder.Entity("siges.Models.ConfiguracionServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteId");

                    b.Property<int?>("ContratoId");

                    b.Property<bool>("Estatus");

                    b.Property<int?>("UbicacionId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ContratoId");

                    b.HasIndex("UbicacionId");

                    b.ToTable("ConfiguracionServicio");
                });

            modelBuilder.Entity("siges.Models.Contrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClienteId");

                    b.Property<bool>("Estatus");

                    b.Property<string>("Nombre");

                    b.Property<string>("Opcional1");

                    b.Property<string>("Opcional2");

                    b.Property<int>("ServicioId");

                    b.Property<string>("Tipo");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ServicioId");

                    b.ToTable("Contrato");
                });

            modelBuilder.Entity("siges.Models.DetalleActivoFijo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Arrendamiento");

                    b.Property<int>("Cantidad");

                    b.Property<string>("Descripcion");

                    b.Property<int?>("EntradaActivoFijoId");

                    b.Property<bool>("Estatus");

                    b.Property<string>("NumeroSerie");

                    b.Property<string>("Observaciones");

                    b.Property<int?>("ReferenciaId");

                    b.Property<string>("Unidad");

                    b.HasKey("Id");

                    b.HasIndex("EntradaActivoFijoId");

                    b.HasIndex("ReferenciaId");

                    b.ToTable("DetalleActivoFijo");
                });

            modelBuilder.Entity("siges.Models.DetalleConfiguracionServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConfiguracionServicioId");

                    b.Property<decimal>("CostoServicio")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("Estatus");

                    b.Property<int?>("LineaNegocioId");

                    b.Property<int>("MaximoServicio");

                    b.Property<int>("MinimoServicio");

                    b.Property<string>("Opcional1");

                    b.Property<int>("Opcional2");

                    b.Property<decimal>("PrecioServicio")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ServicioId");

                    b.HasKey("Id");

                    b.HasIndex("ConfiguracionServicioId");

                    b.HasIndex("LineaNegocioId");

                    b.HasIndex("ServicioId");

                    b.ToTable("DetalleConfiguracionServicio");
                });

            modelBuilder.Entity("siges.Models.DetalleInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<string>("ClaveInsumo");

                    b.Property<int?>("EntradaInsumoId");

                    b.Property<bool>("Estatus");

                    b.Property<string>("Observaciones");

                    b.Property<int?>("ReferenciaId");

                    b.Property<string>("Unidad");

                    b.HasKey("Id");

                    b.HasIndex("EntradaInsumoId");

                    b.HasIndex("ReferenciaId");

                    b.ToTable("DetalleInsumo");
                });

            modelBuilder.Entity("siges.Models.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("calle");

                    b.Property<string>("colonia");

                    b.Property<int>("cp");

                    b.Property<string>("entidadFederativa");

                    b.Property<bool>("estatus");

                    b.Property<string>("municipio");

                    b.Property<int>("numero");

                    b.HasKey("Id");

                    b.ToTable("Direccion");
                });

            modelBuilder.Entity("siges.Models.EntradaActivoFijo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<DateTime>("FechaRecepcion");

                    b.Property<DateTime>("FechaRemision");

                    b.Property<bool>("Incidencia");

                    b.Property<string>("Observaciones");

                    b.Property<string>("Remision");

                    b.Property<string>("Tipo");

                    b.Property<int?>("UbicacionId");

                    b.HasKey("Id");

                    b.HasIndex("UbicacionId");

                    b.ToTable("EntradaActivoFijo");
                });

            modelBuilder.Entity("siges.Models.EntradaInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<DateTime>("FechaPedido");

                    b.Property<DateTime>("FechaRecepcion");

                    b.Property<bool>("Incidencia");

                    b.Property<string>("Observaciones");

                    b.Property<string>("Pedido");

                    b.Property<string>("Tipo");

                    b.Property<int?>("UbicacionId");

                    b.HasKey("Id");

                    b.HasIndex("UbicacionId");

                    b.ToTable("EntradaInsumo");
                });

            modelBuilder.Entity("siges.Models.Insumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Clave");

                    b.Property<string>("Descripcion");

                    b.Property<bool>("Estatus");

                    b.Property<string>("Marca");

                    b.Property<string>("Opcional1");

                    b.Property<string>("Opcional2");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Tipo");

                    b.HasKey("Id");

                    b.ToTable("Insumo");
                });

            modelBuilder.Entity("siges.Models.InventarioAF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivoFijoId");

                    b.Property<int>("Cantidad");

                    b.Property<bool>("Estatus");

                    b.Property<DateTime>("FechaAlta");

                    b.Property<string>("Observaciones");

                    b.Property<int?>("PersonaId");

                    b.HasKey("Id");

                    b.HasIndex("ActivoFijoId");

                    b.HasIndex("PersonaId");

                    b.ToTable("InventarioAF");
                });

            modelBuilder.Entity("siges.Models.InventarioActivoFijo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivoFijoId");

                    b.Property<int>("Ajuste");

                    b.Property<int?>("ConciliacionActivoFijoId");

                    b.Property<bool>("Estatus");

                    b.Property<int>("Fisico");

                    b.Property<int>("Teorico");

                    b.HasKey("Id");

                    b.HasIndex("ActivoFijoId");

                    b.HasIndex("ConciliacionActivoFijoId");

                    b.ToTable("InventarioActivoFijo");
                });

            modelBuilder.Entity("siges.Models.InventarioInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ajuste");

                    b.Property<int?>("ConciliacionInsumoId");

                    b.Property<bool>("Estatus");

                    b.Property<int>("Fisico");

                    b.Property<int?>("InsumoId");

                    b.Property<int>("Teorico");

                    b.HasKey("Id");

                    b.HasIndex("ConciliacionInsumoId");

                    b.HasIndex("InsumoId");

                    b.ToTable("InventarioInsumo");
                });

            modelBuilder.Entity("siges.Models.LineaNegocio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<string>("Nombre");

                    b.Property<string>("Opcional1");

                    b.Property<string>("Opcional2");

                    b.HasKey("Id");

                    b.ToTable("LineaNegocio");
                });

            modelBuilder.Entity("siges.Models.Operador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<DateTime>("FechaAdministrativa");

                    b.Property<DateTime>("Hora");

                    b.Property<int?>("OrdenServicioId");

                    b.Property<int?>("PersonaId");

                    b.HasKey("Id");

                    b.HasIndex("OrdenServicioId");

                    b.HasIndex("PersonaId");

                    b.ToTable("Operador");
                });

            modelBuilder.Entity("siges.Models.Operador+Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComentarioNuevoEstado");

                    b.Property<string>("NuevoEstado");

                    b.Property<int?>("OperadorId");

                    b.HasKey("Id");

                    b.HasIndex("OperadorId");

                    b.ToTable("Estado");
                });

            modelBuilder.Entity("siges.Models.Operador+Estado+Archivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EstadoId");

                    b.Property<string>("Exif");

                    b.Property<string>("ExifBi");

                    b.Property<byte[]>("File");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<long>("Size");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Archivo");
                });

            modelBuilder.Entity("siges.Models.OrdenActivoFijo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivoFijoId");

                    b.Property<bool>("Estatus");

                    b.Property<int?>("OrdenServicioId");

                    b.HasKey("Id");

                    b.HasIndex("ActivoFijoId");

                    b.HasIndex("OrdenServicioId");

                    b.ToTable("OrdenActivoFijo");
                });

            modelBuilder.Entity("siges.Models.OrdenInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<bool>("Estatus");

                    b.Property<int?>("InsumoId");

                    b.Property<int?>("OrdenServicioId");

                    b.HasKey("Id");

                    b.HasIndex("InsumoId");

                    b.HasIndex("OrdenServicioId");

                    b.ToTable("OrdenInsumo");
                });

            modelBuilder.Entity("siges.Models.OrdenPersona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<int?>("OrdenServicioId");

                    b.Property<int?>("PersonaId");

                    b.HasKey("Id");

                    b.HasIndex("OrdenServicioId");

                    b.HasIndex("PersonaId");

                    b.ToTable("OrdenPersona");
                });

            modelBuilder.Entity("siges.Models.OrdenServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteId");

                    b.Property<string>("ContactoAM");

                    b.Property<string>("ContactoAP");

                    b.Property<string>("ContactoEmail");

                    b.Property<string>("ContactoNombre");

                    b.Property<string>("ContactoTelefono");

                    b.Property<int?>("ContratoId");

                    b.Property<string>("EmailCC1");

                    b.Property<string>("EmailCC2");

                    b.Property<bool>("Estatus");

                    b.Property<string>("EstatusServicio");

                    b.Property<DateTime>("FechaAdministrativa");

                    b.Property<DateTime?>("FechaFin");

                    b.Property<DateTime?>("FechaInicio");

                    b.Property<string>("Folio");

                    b.Property<int?>("LineaNegocioId");

                    b.Property<string>("NombreCompletoCC1");

                    b.Property<string>("NombreCompletoCC2");

                    b.Property<string>("Observaciones");

                    b.Property<string>("Opcional1");

                    b.Property<string>("Opcional2");

                    b.Property<string>("Opcional3");

                    b.Property<string>("Opcional4");

                    b.Property<int?>("PersonaComercialId");

                    b.Property<int?>("PersonaValidaId");

                    b.Property<int?>("ServicioId");

                    b.Property<string>("Tipo");

                    b.Property<int?>("UbicacionId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ContratoId");

                    b.HasIndex("LineaNegocioId");

                    b.HasIndex("PersonaComercialId");

                    b.HasIndex("PersonaValidaId");

                    b.HasIndex("ServicioId");

                    b.HasIndex("UbicacionId");

                    b.ToTable("OrdenServicio");
                });

            modelBuilder.Entity("siges.Models.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CURP");

                    b.Property<string>("Categoria");

                    b.Property<string>("ClaveEmpleado");

                    b.Property<int?>("DirId");

                    b.Property<string>("Direccion");

                    b.Property<string>("Email");

                    b.Property<string>("EntidadFederativa");

                    b.Property<bool>("Estatus");

                    b.Property<byte[]>("Fotografia");

                    b.Property<string>("Materno");

                    b.Property<string>("Municipio");

                    b.Property<string>("Nombre");

                    b.Property<string>("Opcional1");

                    b.Property<string>("Opcional2");

                    b.Property<string>("Paterno");

                    b.Property<int>("PerfilId");

                    b.Property<string>("Puesto");

                    b.Property<string>("RFC");

                    b.Property<decimal>("Sueldo")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Telefono");

                    b.Property<string>("TelefonoContacto");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("DirId");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("siges.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<DateTime>("FechaAlta");

                    b.Property<string>("Marca");

                    b.Property<string>("Nombre");

                    b.Property<string>("Opcional1");

                    b.Property<string>("Opcional2");

                    b.HasKey("Id");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("siges.Models.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion");

                    b.Property<bool>("Estatus");

                    b.Property<int>("LineaNegocioId");

                    b.Property<string>("Nombre");

                    b.Property<string>("Opcional1");

                    b.Property<string>("Opcional2");

                    b.HasKey("Id");

                    b.HasIndex("LineaNegocioId");

                    b.ToTable("Servicio");
                });

            modelBuilder.Entity("siges.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("AttachmentFile1");

                    b.Property<string>("AttachmentFile1Name");

                    b.Property<bool>("EmailEnableSSL");

                    b.Property<string>("EmailHost");

                    b.Property<string>("EmailPass");

                    b.Property<string>("EmailPort");

                    b.Property<string>("EmailUser");

                    b.Property<int>("FolioDigitsLong");

                    b.Property<string>("FolioPrefix");

                    b.Property<int>("MaxCaractersFields");

                    b.Property<string>("MinimumDateCriteria");

                    b.Property<int>("RemainingDaysToUpload");

                    b.Property<bool>("SendAttachmentFile");

                    b.Property<bool>("ValidateMinimumDate");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("siges.Models.TraspasoActivoFijo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<DateTime>("FechaEnvio");

                    b.Property<DateTime>("FechaSalida");

                    b.Property<string>("Folio");

                    b.Property<string>("MotivoSalida");

                    b.Property<string>("NumGuia");

                    b.Property<string>("Paqueteria");

                    b.Property<int?>("UbicacionDestinoId");

                    b.Property<int?>("UbicacionOrigenId");

                    b.HasKey("Id");

                    b.HasIndex("UbicacionDestinoId");

                    b.HasIndex("UbicacionOrigenId");

                    b.ToTable("TraspasoActivoFijo");
                });

            modelBuilder.Entity("siges.Models.TraspasoDetalleActivoFijo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivoFijoId");

                    b.Property<bool>("Estatus");

                    b.Property<int?>("TraspasoActivoFijoId");

                    b.HasKey("Id");

                    b.HasIndex("ActivoFijoId");

                    b.HasIndex("TraspasoActivoFijoId");

                    b.ToTable("TraspasoDetalleActivoFijo");
                });

            modelBuilder.Entity("siges.Models.TraspasoDetalleInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<int?>("InsumoId");

                    b.Property<int?>("TraspasoInsumoId");

                    b.HasKey("Id");

                    b.HasIndex("InsumoId");

                    b.HasIndex("TraspasoInsumoId");

                    b.ToTable("TraspasoDetalleInsumo");
                });

            modelBuilder.Entity("siges.Models.TraspasoInsumo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estatus");

                    b.Property<DateTime>("FechaEnvio");

                    b.Property<DateTime>("FechaSalida");

                    b.Property<string>("Folio");

                    b.Property<string>("MotivoSalida");

                    b.Property<string>("NumGuia");

                    b.Property<string>("Paqueteria");

                    b.Property<int?>("UbicacionDestinoId");

                    b.Property<int?>("UbicacionOrigenId");

                    b.HasKey("Id");

                    b.HasIndex("UbicacionDestinoId");

                    b.HasIndex("UbicacionOrigenId");

                    b.ToTable("TraspasoInsumo");
                });

            modelBuilder.Entity("siges.Models.Ubicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClienteId");

                    b.Property<string>("Contacto");

                    b.Property<string>("ContactoEmail");

                    b.Property<string>("ContactoOpcional");

                    b.Property<string>("ContactoOpcionalEmail");

                    b.Property<string>("ContactoOpcionalTelefono");

                    b.Property<string>("ContactoTelefono");

                    b.Property<string>("Direccion");

                    b.Property<bool>("Estatus");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Ubicacion");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("siges.Areas.Identity.Data.RoatechIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("siges.Areas.Identity.Data.RoatechIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("siges.Areas.Identity.Data.RoatechIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("siges.Areas.Identity.Data.RoatechIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("siges.Areas.Identity.Data.RoatechIdentityUser", b =>
                {
                    b.HasOne("siges.Models.Direccion", "dir")
                        .WithMany()
                        .HasForeignKey("dirId");

                    b.HasOne("siges.Models.Persona", "per")
                        .WithMany()
                        .HasForeignKey("perId");
                });

            modelBuilder.Entity("siges.Models.BitacoraEstatus", b =>
                {
                    b.HasOne("siges.Models.OrdenServicio", "Os")
                        .WithMany()
                        .HasForeignKey("OsId");

                    b.HasOne("siges.Models.Persona", "QuienCambia")
                        .WithMany()
                        .HasForeignKey("QuienCambiaId");
                });

            modelBuilder.Entity("siges.Models.ConciliacionActivoFijo", b =>
                {
                    b.HasOne("siges.Models.Ubicacion", "Ubicacion")
                        .WithMany()
                        .HasForeignKey("UbicacionId");
                });

            modelBuilder.Entity("siges.Models.ConciliacionInsumo", b =>
                {
                    b.HasOne("siges.Models.Ubicacion", "Ubicacion")
                        .WithMany()
                        .HasForeignKey("UbicacionId");
                });

            modelBuilder.Entity("siges.Models.ConfiguracionServicio", b =>
                {
                    b.HasOne("siges.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("siges.Models.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId");

                    b.HasOne("siges.Models.Ubicacion", "Ubicacion")
                        .WithMany()
                        .HasForeignKey("UbicacionId");
                });

            modelBuilder.Entity("siges.Models.Contrato", b =>
                {
                    b.HasOne("siges.Models.Cliente", "Cliente")
                        .WithMany("Contratos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("siges.Models.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("siges.Models.DetalleActivoFijo", b =>
                {
                    b.HasOne("siges.Models.EntradaActivoFijo")
                        .WithMany("Desglose")
                        .HasForeignKey("EntradaActivoFijoId");

                    b.HasOne("siges.Models.ActivoFijo", "Referencia")
                        .WithMany()
                        .HasForeignKey("ReferenciaId");
                });

            modelBuilder.Entity("siges.Models.DetalleConfiguracionServicio", b =>
                {
                    b.HasOne("siges.Models.ConfiguracionServicio")
                        .WithMany("Detalle")
                        .HasForeignKey("ConfiguracionServicioId");

                    b.HasOne("siges.Models.LineaNegocio", "LineaNegocio")
                        .WithMany()
                        .HasForeignKey("LineaNegocioId");

                    b.HasOne("siges.Models.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId");
                });

            modelBuilder.Entity("siges.Models.DetalleInsumo", b =>
                {
                    b.HasOne("siges.Models.EntradaInsumo")
                        .WithMany("Desglose")
                        .HasForeignKey("EntradaInsumoId");

                    b.HasOne("siges.Models.Insumo", "Referencia")
                        .WithMany()
                        .HasForeignKey("ReferenciaId");
                });

            modelBuilder.Entity("siges.Models.EntradaActivoFijo", b =>
                {
                    b.HasOne("siges.Models.Ubicacion", "Ubicacion")
                        .WithMany()
                        .HasForeignKey("UbicacionId");
                });

            modelBuilder.Entity("siges.Models.EntradaInsumo", b =>
                {
                    b.HasOne("siges.Models.Ubicacion", "Ubicacion")
                        .WithMany()
                        .HasForeignKey("UbicacionId");
                });

            modelBuilder.Entity("siges.Models.InventarioAF", b =>
                {
                    b.HasOne("siges.Models.ActivoFijo", "ActivoFijo")
                        .WithMany()
                        .HasForeignKey("ActivoFijoId");

                    b.HasOne("siges.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId");
                });

            modelBuilder.Entity("siges.Models.InventarioActivoFijo", b =>
                {
                    b.HasOne("siges.Models.ActivoFijo", "ActivoFijo")
                        .WithMany()
                        .HasForeignKey("ActivoFijoId");

                    b.HasOne("siges.Models.ConciliacionActivoFijo")
                        .WithMany("Detalle")
                        .HasForeignKey("ConciliacionActivoFijoId");
                });

            modelBuilder.Entity("siges.Models.InventarioInsumo", b =>
                {
                    b.HasOne("siges.Models.ConciliacionInsumo")
                        .WithMany("Detalle")
                        .HasForeignKey("ConciliacionInsumoId");

                    b.HasOne("siges.Models.Insumo", "Insumo")
                        .WithMany()
                        .HasForeignKey("InsumoId");
                });

            modelBuilder.Entity("siges.Models.Operador", b =>
                {
                    b.HasOne("siges.Models.OrdenServicio", "OrdenServicio")
                        .WithMany()
                        .HasForeignKey("OrdenServicioId");

                    b.HasOne("siges.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId");
                });

            modelBuilder.Entity("siges.Models.Operador+Estado", b =>
                {
                    b.HasOne("siges.Models.Operador")
                        .WithMany("EstadoN")
                        .HasForeignKey("OperadorId");
                });

            modelBuilder.Entity("siges.Models.Operador+Estado+Archivo", b =>
                {
                    b.HasOne("siges.Models.Operador+Estado")
                        .WithMany("ArchivosEvidencia")
                        .HasForeignKey("EstadoId");
                });

            modelBuilder.Entity("siges.Models.OrdenActivoFijo", b =>
                {
                    b.HasOne("siges.Models.ActivoFijo", "ActivoFijo")
                        .WithMany()
                        .HasForeignKey("ActivoFijoId");

                    b.HasOne("siges.Models.OrdenServicio", "OrdenServicio")
                        .WithMany("Activos")
                        .HasForeignKey("OrdenServicioId");
                });

            modelBuilder.Entity("siges.Models.OrdenInsumo", b =>
                {
                    b.HasOne("siges.Models.Insumo", "Insumo")
                        .WithMany()
                        .HasForeignKey("InsumoId");

                    b.HasOne("siges.Models.OrdenServicio")
                        .WithMany("Insumos")
                        .HasForeignKey("OrdenServicioId");
                });

            modelBuilder.Entity("siges.Models.OrdenPersona", b =>
                {
                    b.HasOne("siges.Models.OrdenServicio", "OrdenServicio")
                        .WithMany("Personal")
                        .HasForeignKey("OrdenServicioId");

                    b.HasOne("siges.Models.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId");
                });

            modelBuilder.Entity("siges.Models.OrdenServicio", b =>
                {
                    b.HasOne("siges.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("siges.Models.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId");

                    b.HasOne("siges.Models.LineaNegocio", "LineaNegocio")
                        .WithMany()
                        .HasForeignKey("LineaNegocioId");

                    b.HasOne("siges.Models.Persona", "PersonaComercial")
                        .WithMany()
                        .HasForeignKey("PersonaComercialId");

                    b.HasOne("siges.Models.Persona", "PersonaValida")
                        .WithMany()
                        .HasForeignKey("PersonaValidaId");

                    b.HasOne("siges.Models.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId");

                    b.HasOne("siges.Models.Ubicacion", "Ubicacion")
                        .WithMany()
                        .HasForeignKey("UbicacionId");
                });

            modelBuilder.Entity("siges.Models.Persona", b =>
                {
                    b.HasOne("siges.Models.Direccion", "Dir")
                        .WithMany()
                        .HasForeignKey("DirId");
                });

            modelBuilder.Entity("siges.Models.Servicio", b =>
                {
                    b.HasOne("siges.Models.LineaNegocio", "LineaNegocio")
                        .WithMany()
                        .HasForeignKey("LineaNegocioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("siges.Models.TraspasoActivoFijo", b =>
                {
                    b.HasOne("siges.Models.Ubicacion", "UbicacionDestino")
                        .WithMany()
                        .HasForeignKey("UbicacionDestinoId");

                    b.HasOne("siges.Models.Ubicacion", "UbicacionOrigen")
                        .WithMany()
                        .HasForeignKey("UbicacionOrigenId");
                });

            modelBuilder.Entity("siges.Models.TraspasoDetalleActivoFijo", b =>
                {
                    b.HasOne("siges.Models.ActivoFijo", "ActivoFijo")
                        .WithMany()
                        .HasForeignKey("ActivoFijoId");

                    b.HasOne("siges.Models.TraspasoActivoFijo")
                        .WithMany("Detalle")
                        .HasForeignKey("TraspasoActivoFijoId");
                });

            modelBuilder.Entity("siges.Models.TraspasoDetalleInsumo", b =>
                {
                    b.HasOne("siges.Models.Insumo", "Insumo")
                        .WithMany()
                        .HasForeignKey("InsumoId");

                    b.HasOne("siges.Models.TraspasoInsumo")
                        .WithMany("Detalle")
                        .HasForeignKey("TraspasoInsumoId");
                });

            modelBuilder.Entity("siges.Models.TraspasoInsumo", b =>
                {
                    b.HasOne("siges.Models.Ubicacion", "UbicacionDestino")
                        .WithMany()
                        .HasForeignKey("UbicacionDestinoId");

                    b.HasOne("siges.Models.Ubicacion", "UbicacionOrigen")
                        .WithMany()
                        .HasForeignKey("UbicacionOrigenId");
                });

            modelBuilder.Entity("siges.Models.Ubicacion", b =>
                {
                    b.HasOne("siges.Models.Cliente", "Cliente")
                        .WithMany("Ubicaciones")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
